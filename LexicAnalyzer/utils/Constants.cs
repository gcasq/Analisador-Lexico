namespace LexicAnalyzer.utils {
    public static class Constants {
        public const int MAX_NEST_LEVEL = 1000;

        public const int DF_RULE = 7;
        public const int DT_STRUCT_RULE = 8;
        public const int DT_ARRAY_RULE = 9;
        public const int DT_ALIAS_RULE = 10;
        public const int DC_DC_RULE = 11;
        public const int DC_LI_RULE = 12;
        public const int LI_COMMA_RULE = 13;
        public const int LI_IDD_RULE = 14;
        public const int DV_VAR_RULE = 15;
        public const int LP_LP_RULE = 16;
        public const int LP_IDD_RULE = 17;
        public const int LP_EPSILON_RULE = 18;
        public const int S_E_SEMICOLON = 27;
        public const int S_BLOCK_RULE = 28;
        public const int S_WHILE_RULE = 29;
        public const int S_DO_WHILE_RULE = 30;
        public const int S_IF_RULE = 31;
        public const int S_IF_ELSE_RULE = 32;
        public const int S_BREAK_RULE = 33;
        public const int S_CONTINUE_RULE = 34;
        public const int S_RETURN_RULE = 35;
        public const int E_AND_RULE = 36;
        public const int E_OR_RULE = 37;
        public const int E_L_RULE = 38;
        public const int E_LV_EQUAL_RULE = 39;
        public const int L_LESS_THAN_RULE = 40;
        public const int L_GREATER_THAN_RULE = 41;
        public const int L_LESS_EQUAL_RULE = 42;
        public const int L_GREATER_EQUAL_RULE = 43;
        public const int L_EQUAL_EQUAL_RULE = 44;
        public const int L_NOT_EQUAL_RULE = 45;
        public const int L_R_RULE = 46;
        public const int R_PLUS_RULE = 47;
        public const int R_MINUS_RULE = 48;
        public const int R_K_RULE = 49;
        public const int K_TIMES_RULE = 50;
        public const int K_DIVIDE_RULE = 51;
        public const int K_F_RULE = 52;
        public const int F_LV_RULE = 53;
        public const int F_LEFT_PLUS_PLUS_RULE = 54;
        public const int F_LEFT_MINUS_MINUS_RULE = 55;
        public const int F_RIGHT_PLUS_PLUS_RULE = 56;
        public const int F_RIGHT_MINUS_MINUS_RULE = 57;
        public const int F_PARENTHESIS_E_RULE = 58;
        public const int F_IDU_MC_RULE = 59;
        public const int F_MINUS_F_RULE = 60;
        public const int F_NOT_F_RULE = 61;
        public const int F_TRUE_RULE = 62;
        public const int F_FALSE_RULE = 63;
        public const int F_CHR_RULE = 64;
        public const int F_STR_RULE = 65;
        public const int F_NUM_RULE = 66;
        public const int LE_LE_RULE = 67;
        public const int LE_E_RULE = 68;
        public const int LE_EPSILON_RULE = 69;
        public const int LV_DOT_RULE = 70;
        public const int LV_SQUARE_RULE = 71;
        public const int LV_IDU_RULE = 72;
        public const int T_INTEGER_RULE = 73;
        public const int T_CHAR_RULE = 74;
        public const int T_BOOL_RULE = 75;
        public const int T_STRING_RULE = 76;
        public const int T_IDU_RULE = 77;
        public const int TRUE_RULE = 78;
        public const int FALSE_RULE = 79;
        public const int CHR_RULE = 80;
        public const int STR_RULE = 81;
        public const int NUM_RULE = 82;
        public const int IDD_RULE = 83;
        public const int IDU_RULE = 84;
        public const int ID_RULE = 85;
        public const int NB_RULE = 86;
        public const int MF_RULE = 87;
        public const int MC_RULE = 88;
        public const int NF_RULE = 89;
        public const int MT_RULE = 90;
        public const int ME_RULE = 91;
        public const int MW_RULE = 92;
        public const int MA_RULE = 93;
    }
}
